@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=700, user-scalable=no" />
    <meta name="description" content="荒木比奈が好きという気持ちをシェアできる全く新しい画期的なWEBサービスっス" />
    <title>ひなすきボタン</title>

    <link rel="stylesheet" href="~/css/site.css" />
    <style>
        body {
            position: relative;
        }

        #frame {
            margin: auto;
            position: absolute;
            top: 0px;
            bottom: 0px;
            left: 0px;
            right: 0px;
            height: 300px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div id="frame">

        <div id="counter">
            <h1>荒木比奈が好きという気持ちをシェアできる全く新しい画期的なWEBサービスっス</h1>
            <div id="count" v-text="count">&nbsp;</div>
            <div style="height: 80px;">
                <div id="hinasuki" class="button" href="#" v-on:click="add" v-on:touchend="addTouchEnd">ひなすき</div><br />
            </div>
            <div style="height: 50px;">
                <div id="tweet" class="button" href="#" v-on:click="tweet">ツイートする</div><br />
            </div>
            <div id="about">
                ひなすきボタン ver.2.0 <a href="~/Home/About">[ ABOUT ]</a>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/promise-polyfill@7/dist/polyfill.min.js"></script>
    <script src="~/scripts/fetch.js"></script>
    <script src="~/scripts/signalr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue"></script>
    <script>
        @* IE対応 *@
        Math.log10 = Math.log10 || function (x) {
            return Math.log(x) / Math.LN10;
        };

        const getLocalCount = function () {
            const count = parseInt(localStorage.getItem('count'));
            return isNaN(count) ? 0 : count;
        };

        const setLocalCount = function (count) {
            localStorage.setItem('count', count);
        }

        const counter = new Vue({
            el: '#counter',
            data: {
                count: getLocalCount(),
                realCount: getLocalCount(),

                connection: null,

                updating: false,
            },
            mounted: function () {
                this.connection = new signalR.HubConnectionBuilder()
                    .withUrl('/Hinasuki')
                    .build();

                this.connection.on('Hinasuki', function (count) {
                    counter.realCount = count;

                    if (!counter.updating && counter.count !== counter.realCount) {
                        counter.updateCount();
                    }
                });

                this.connection.on('UserCount', function (userCount) {
                    console.log('User: ' + userCount);
                });

                this.connection.onclose(function (error) {
                    console.log('onclose: ' + error);

                    setTimeout(function () {
                        counter.connect();
                    }, 3000);
                });

                this.connect();
            },

            methods: {
                connect: function () {
                    this.connection.start()
                        .then(function () {
                            counter.connection.send('GetStatus')
                                .catch(function (error) {
                                    console.log('GetStatus: ' + error);
                                });
                        })
                        .catch(function (error) {
                            console.log('connection.start: ' + error);

                            setTimeout(function () {
                                counter.connect();
                            }, 3000);
                        });
                },
                updateCount: function () {
                    const diff = this.realCount - this.count;
                    if (diff <= 0) {
                        this.updating = false;
                    } else {
                        this.updating = true;

                        @*
                            差分の値を徐々に追加していくために、2次関数を使用して値を1追加するための更新間隔を決定する。
                            更新間隔の最低値は5FPS(200ms)とする。
                            更新間隔が60FPSよりも短い場合は1Frameに1追加する。
                            更新間隔が60FPSを超える場合は、更新間隔は60FPSとして1Frameに2以上追加する。
                        *@
                        const calculateSpan = 200 / (0.02 * diff * diff + 1);

                        const updateSpan = Math.max(Math.round(calculateSpan), 16); @* 最大60FPSに押さえる。 *@

                        if (16 <= calculateSpan) {
                            this.count += 1;
                        } else {
                            @*
                                差が大きいほど指数関数的に更新間隔が小さくなる→指数関数的に追加する値が大きくなるため、
                                ある地点で実際の値より遙かに大きな値を追加する事になる。
                                そのため、差の値より一桁少ない10の倍数を上限とする。

                                また、最大値が固定だと増加パターンが見えてしまうので、ばらつきを持たせる。
                            *@
                            const addCount = 16 / calculateSpan;
                            const scale = Math.max(Math.floor(Math.log10(diff)) - 2, 0);
                            const limit = (Math.random() * 2.9 + 7) * Math.pow(10, scale);
                            this.count += Math.round(Math.min(addCount, limit));
                        }

                        setTimeout(this.updateCount, updateSpan);
                    }
                },
                add: function () {
                    this.connection.send('AddCount')
                        .then(function () {
                            counter.count++;
                        })
                        .catch(function (error) {
                            console.log('add: ' + error);
                        });
                },
                addTouchEnd: function (event) {
                    this.add();
                    @*
                        iOSのSafariでは、viewportのuser-scalable=noの指定が無視され、常に拡大縮小が可能となる。
                        ひなすきボタンを連打すると、要素のダブルタップと判定されるため、画面の拡大と縮小が連続して発生する。
                        touchendイベントでevent.preventDefault();を呼び出すと拡大縮小は発生しなくなるが、
                        clickイベント自体が発生しなくなる。
                        そこで、ひなすきボタンのtouchendイベントを拾い、clickイベントと同じ処理を行った後でevent.preventDefault();を呼び出す。

                        現在のところEdgeでも同様の問題が発生する上、Edgeのデフォルトではタッチイベント自体が発生しないため解決手段がない。
                        Edgeユーザーでタッチ操作する人が少ないだろう事と、タッチイベントが有効になれば直るため、今のところ無視する。
                    *@
                    event.preventDefault();
                },
                tweet: function () {
                    window.open('https://twitter.com/intent/tweet?text=荒木比奈が好きという気持ちをシェアできる全く新しい画期的なWEBサービス「ひなすきボタン」ver.2.0&url=http%3A%2F%2Fhinasuki.com',
                        '',
                        'width=650, height=450, menuber=no, toolbar=no, scrollbars=yes');
                }
            },
        });
    </script>
</body>
</html>
